#!/usr/bin/env php
<?php
require dirname(__DIR__) . '/vendor/autoload.php';
use GuzzleHttp\Message\Response;
use GuzzleHttp\Client;
use Herrera\Version\Dumper as VersionDumper;
use Herrera\Version\Parser as VersionParser;

if ($argc != 3) {
    file_put_contents('php://stderr', "Usage: {$argv[0]} {repo_owner} {repo_name}\n");
    exit(1);
}

$owner = $argv[1];
$repo = $argv[2];
$token = getToken(dirname(__DIR__) . '/.access_token');

$client = new Client(['base_url' => 'https://api.github.com/', 'defaults' => ['headers' => ['Authorization' => "token {$token}"]]]);

$tagName = $client->get("repos/{$owner}/{$repo}/releases")->json()[0]['tag_name'];

$commits = getCommitsSinceTag($client, $owner, $repo, $tagName);
$releaseNotes = implode("\n", array_map('formatPullRequest', getPullRequests($commits)));

$nextVersionNumber = incrementVersion(ltrim($tagName, 'v'));
$nextTagName = "v{$nextVersionNumber}";

$randomNameDir = dirname(__DIR__) . '/vgng';
$randomName = exec("cd {$randomNameDir}; ./vgng.py");

$postData = ['tag_name' => $nextTagName, 'name' => "Version {$nextVersionNumber}: {$randomName}", 'body' => $releaseNotes, 'draft' => true];

$client->post("/repos/{$owner}/{$repo}/releases", ['body' => json_encode($postData)]);

function getToken($cacheFile)
{
    $token = null;
    if (file_exists($cacheFile)) {
        $token = file_get_contents($cacheFile);
    }

    if (!$token) {
        $token = readline("Please enter a github access token:\n");
        file_put_contents($cacheFile, $token);
    }

    return $token;
}

function incrementVersion($tagName)
{
    $version = VersionParser::toBuilder(ltrim($tagName, 'v'));
    $version->clearBuild();
    $version->clearPreRelease();
    $version->incrementPatch();

    return VersionDumper::toString($version);
}

function getCommitsSinceTag(Client $client, $owner, $repo, $tagName)
{
    return $client->get("repos/{$owner}/{$repo}/compare/{$tagName}...master")->json()['commits'];
}

function getPullRequests(array $commits)
{
    $results = [];
    foreach ($commits as $commit) {
        if (
            count($commit['parents']) === 2 &&
            preg_match('/Merge pull request #([0-9]*)[^\n]*\n[^\n]*\n(.*)/s', $commit['commit']['message'], $matches)
        ) {
            $results[] = ['number' => $matches[1], 'message' => $matches[2]];
        }
    }

    return $results;
}

function formatPullRequest($pullRequest)
{
    return "* {$pullRequest['message']}&nbsp;<sup>[PR&nbsp;#{$pullRequest['number']}]</sup>";
}

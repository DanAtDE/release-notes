#!/usr/bin/env php
<?php
require dirname(__DIR__) . '/vendor/autoload.php';
use GuzzleHttp\Message\Response;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\ClientException;

if ($argc != 3) {
    file_put_contents('php://stderr', "Usage: {$argv[0]} {repo_owner} {repo_name}\n");
    exit(1);
}

$owner = $argv[1];
$repo = $argv[2];

$token = '';
$tokenFile = dirname(__DIR__) . '/.access_token';
if (file_exists($tokenFile)) {
    $token = file_get_contents($tokenFile);
}

if (!$token) {
    $token = readline("Please enter a github access token:\n");
    file_put_contents($tokenFile, $token);
}

$client = new Client(['base_url' => 'https://api.github.com/', 'defaults' => ['headers' => ['Authorization' => "token {$token}"]]]);

$res = $client->get("repos/{$owner}/{$repo}/releases");

$releases = $res->json();

$tagName = $releases[0]['tag_name'];

try {
    $commits = getCommitsSinceTag($client, $owner, $repo, $tagName);
} catch (ClientException $e) {
    file_put_contents(
        'php://stderr',
        "There was a problem accessing the last release.  Is it possible that a draft has already been created?\n"
    );
    exit(1);
}

$releaseNotes = implode("\n", array_map('formatPullRequest', getPullRequests($commits)));

$nextTagName = getNextTagName($tagName);
$nextVersionNumber = preg_replace('#[^0-9\.]#', '', $nextTagName);

$randomNameDir = dirname(__DIR__) . '/vgng';
$randomName = exec("cd {$randomNameDir}; ./vgng.py");

$postData = ['tag_name' => $nextTagName, 'name' => "Version {$nextVersionNumber}: {$randomName}", 'body' => $releaseNotes, 'draft' => true];

$client->post("/repos/{$owner}/{$repo}/releases", ['body' => json_encode($postData)]);

function getNextTagName($tagName)
{
    $parts = explode('.', $tagName);
    $parts[count($parts) - 1]++;
    return implode('.', $parts);
}

function getCommitsSinceTag(Client $client, $owner, $repo, $tagName)
{
    return $client->get("repos/{$owner}/{$repo}/compare/{$tagName}...master")->json()['commits'];
}

function getPullRequests(array $commits)
{
    $results = [];
    foreach ($commits as $commit) {
        if (
            count($commit['parents']) === 2 &&
            preg_match('/Merge pull request #([0-9]*)[^\n]*\n[^\n]*\n(.*)/s', $commit['commit']['message'], $matches)
        ) {
            $results[] = ['number' => $matches[1], 'message' => $matches[2]];
        }
    }

    return $results;
}

function formatPullRequest($pullRequest)
{
    return "* {$pullRequest['message']}&nbsp;<sup>[PR&nbsp;#{$pullRequest['number']}]</sup>";
}
